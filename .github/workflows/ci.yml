name: 'CI/CD (Build, Lint, Test, Security, Performance)'
on:
    push:
        branches: [development, main, master]
    pull_request:
        branches: [development, main, master]

env:
    NODE_VERSION: '20'

jobs:
    setup-and-check:
        runs-on: ubuntu-latest
        outputs:
            cache-key: ${{ steps.cache-deps.outputs.cache-hit }}
        steps:
            - uses: actions/checkout@v4
              
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  
            - name: Enable Corepack (pnpm)
              run: corepack enable
              
            - name: Cache dependencies
              id: cache-deps
              uses: actions/cache@v3
              with:
                  path: node_modules
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-
                      
            - name: Install dependencies
              if: steps.cache-deps.outputs.cache-hit != 'true'
              run: pnpm install
              
            - name: Lint
              run: pnpm lint:errors
              
            - name: Format check
              run: pnpm format --check
              
            - name: Test
              run: pnpm test
              
    security-audit:
        runs-on: ubuntu-latest
        needs: setup-and-check
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - name: Enable Corepack
              run: corepack enable
            - name: Install dependencies
              run: pnpm install
            - name: Security audit
              run: pnpm audit --audit-level high
              continue-on-error: true
            - name: Check for vulnerabilities
              run: |
                  VULN_COUNT=$(pnpm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' 2>/dev/null || echo "0")
                  echo "High/Critical vulnerabilities: $VULN_COUNT"
                  if [ "$VULN_COUNT" -gt 0 ]; then
                      echo "‚ö†Ô∏è Found $VULN_COUNT high/critical vulnerabilities"
                      pnpm audit --audit-level high
                  else
                      echo "‚úÖ No high/critical vulnerabilities found"
                  fi
                  
    build-and-analyze:
        runs-on: ubuntu-latest
        needs: setup-and-check
        steps:
            - uses: actions/checkout@v4
            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
            - name: Enable Corepack
              run: corepack enable
            - name: Install dependencies
              run: pnpm install
            - name: Build with analysis
              run: pnpm build:analyze
              env:
                  ANALYZE: true
            - name: Check bundle sizes
              run: |
                  echo "üìä Bundle Size Analysis"
                  find dist -name "*.js" -exec basename {} \; | head -10
                  echo "Largest JS files:"
                  find dist -name "*.js" -exec ls -lh {} + | sort -k5 -hr | head -5
                  echo "Total dist size:"
                  du -sh dist
            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: dist
                  retention-days: 7
            - name: Upload bundle analysis
              uses: actions/upload-artifact@v4
              with:
                  name: bundle-analysis
                  path: dist/stats.html
                  retention-days: 30
                  
    performance-budget:
        runs-on: ubuntu-latest
        needs: build-and-analyze
        steps:
            - uses: actions/checkout@v4
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist
                  path: dist
            - name: Performance budget check
              run: |
                  echo "üéØ Performance Budget Check"
                  
                  # Check main bundle size (should be < 500KB)
                  MAIN_SIZE=$(find dist -name "index-*.js" -exec stat -f%z {} \; 2>/dev/null || find dist -name "index-*.js" -exec stat -c%s {} \;)
                  MAIN_SIZE_KB=$((MAIN_SIZE / 1024))
                  
                  echo "Main bundle size: ${MAIN_SIZE_KB}KB"
                  
                  if [ $MAIN_SIZE_KB -gt 500 ]; then
                      echo "‚ùå Main bundle exceeds 500KB limit (${MAIN_SIZE_KB}KB)"
                      exit 1
                  else
                      echo "‚úÖ Main bundle within budget (${MAIN_SIZE_KB}KB)"
                  fi
                  
                  # Check total JS size (should be < 2MB)
                  TOTAL_JS_SIZE=$(find dist -name "*.js" -exec stat -f%z {} \; 2>/dev/null | awk '{sum+=$1} END {print sum}' || find dist -name "*.js" -exec stat -c%s {} \; | awk '{sum+=$1} END {print sum}')
                  TOTAL_JS_KB=$((TOTAL_JS_SIZE / 1024))
                  
                  echo "Total JS size: ${TOTAL_JS_KB}KB"
                  
                  if [ $TOTAL_JS_KB -gt 2048 ]; then
                      echo "‚ùå Total JS exceeds 2MB limit (${TOTAL_JS_KB}KB)"
                      exit 1
                  else
                      echo "‚úÖ Total JS within budget (${TOTAL_JS_KB}KB)"
                  fi
